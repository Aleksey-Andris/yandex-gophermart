// Code generated by MockGen. DO NOT EDIT.
// Source: internal/orders/usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/orders/usecase.go -destination=internal/orders/mocks/usecase.go
//
// Package mock_orders is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	orders "github.com/Aleksey-Andris/yandex-gophermart/internal/orders"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddOne mocks base method.
func (m *MockStorage) AddOne(ctx context.Context, auth *orders.Order) (*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOne", ctx, auth)
	ret0, _ := ret[0].(*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOne indicates an expected call of AddOne.
func (mr *MockStorageMockRecorder) AddOne(ctx, auth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOne", reflect.TypeOf((*MockStorage)(nil).AddOne), ctx, auth)
}

// GetAll mocks base method.
func (m *MockStorage) GetAll(ctx context.Context, userID int64) ([]orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStorageMockRecorder) GetAll(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStorage)(nil).GetAll), ctx, userID)
}

// GetAllUactual mocks base method.
func (m *MockStorage) GetAllUactual(ctx context.Context) ([]orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUactual", ctx)
	ret0, _ := ret[0].([]orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUactual indicates an expected call of GetAllUactual.
func (mr *MockStorageMockRecorder) GetAllUactual(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUactual", reflect.TypeOf((*MockStorage)(nil).GetAllUactual), ctx)
}

// Update mocks base method.
func (m *MockStorage) Update(ctx context.Context, ordrs []orders.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ordrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorageMockRecorder) Update(ctx, ordrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), ctx, ordrs)
}

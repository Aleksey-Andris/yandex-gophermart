// Code generated by MockGen. DO NOT EDIT.
// Source: internal/authorisations/usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/authorisations/usecase.go -destination=internal/authorisation/mocks/mock.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	authorisations "github.com/Aleksey-Andris/yandex-gophermart/internal/authorisations"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockStorage) Login(ctx context.Context, auth *authorisations.Auth) (*authorisations.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, auth)
	ret0, _ := ret[0].(*authorisations.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockStorageMockRecorder) Login(ctx, auth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStorage)(nil).Login), ctx, auth)
}

// Register mocks base method.
func (m *MockStorage) Register(ctx context.Context, auth *authorisations.Auth) (*authorisations.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, auth)
	ret0, _ := ret[0].(*authorisations.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockStorageMockRecorder) Register(ctx, auth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockStorage)(nil).Register), ctx, auth)
}
